// lib/services/notification_service.dart - FULL VERSION
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;
import 'package:permission_handler/permission_handler.dart';
import 'package:flutter/material.dart';

class NotificationService {
  static final FlutterLocalNotificationsPlugin _notifications =
      FlutterLocalNotificationsPlugin();

  static Future<void> showTestNotification() async {
    const androidDetails = AndroidNotificationDetails(
      'test',
      'Test Notifications',
      channelDescription: 'Test notifications',
      importance: Importance.defaultImportance,
      priority: Priority.defaultPriority,
    );

    const notificationDetails = NotificationDetails(android: androidDetails);

    await _notifications.show(
      999,
      'üåÖ Test: Ch√†o bu·ªïi s√°ng!',
      'ƒê√¢y l√† test notification cho ch√†o bu·ªïi s√°ng',
      notificationDetails,
    );
  }

  static bool _isInitialized = false;

  // Notification IDs
  static const int dailyGreetingId = 1;
  static const int airQualityId = 2;
  static const int weatherAlertId = 3;

  /// Kh·ªüi t·∫°o notification service
  static Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      // Initialize timezone
      tz.initializeTimeZones();
      tz.setLocalLocation(tz.getLocation('Asia/Ho_Chi_Minh'));

      // Android initialization
      const AndroidInitializationSettings androidSettings =
          AndroidInitializationSettings('@mipmap/ic_launcher');

      // iOS initialization
      const DarwinInitializationSettings iosSettings =
          DarwinInitializationSettings(
        requestAlertPermission: true,
        requestBadgePermission: true,
        requestSoundPermission: true,
      );

      const InitializationSettings initSettings = InitializationSettings(
        android: androidSettings,
        iOS: iosSettings,
      );

      await _notifications.initialize(
        initSettings,
        onDidReceiveNotificationResponse: _onNotificationTapped,
      );

      _isInitialized = true;
      print('‚úÖ NotificationService initialized successfully');
    } catch (e) {
      print('‚ùå Error initializing NotificationService: $e');
      _isInitialized = false;
    }
  }

  /// X·ª≠ l√Ω khi user tap v√†o notification
  static void _onNotificationTapped(NotificationResponse response) {
    print('üîî Notification tapped: ${response.payload}');
    // TODO: Navigate to specific screen based on payload
  }

  /// Request permission
  static Future<bool> requestPermission() async {
    try {
      // Request basic notification permission
      if (await Permission.notification.isDenied) {
        final status = await Permission.notification.request();
        if (status != PermissionStatus.granted) {
          print('‚ùå Notification permission denied');
          return false;
        }
      }

      // For Android 13+ (API 33+), request POST_NOTIFICATIONS permission
      final androidImplementation =
          _notifications.resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>();

      if (androidImplementation != null) {
        final bool? androidResult =
            await androidImplementation.requestNotificationsPermission();
        print('‚úÖ Android notification permission: $androidResult');
        return androidResult ?? true;
      }

      return true;
    } catch (e) {
      print('‚ùå Error requesting permission: $e');
      return false;
    }
  }

  /// Schedule daily greeting notification (7 AM every day)
  static Future<void> scheduleDailyGreeting() async {
    try {
      if (!_isInitialized) await initialize();

      const AndroidNotificationDetails androidDetails =
          AndroidNotificationDetails(
        'daily_greeting',
        'Ch√†o bu·ªïi s√°ng',
        channelDescription: 'Th√¥ng b√°o ch√†o bu·ªïi s√°ng h√†ng ng√†y',
        importance: Importance.defaultImportance,
        priority: Priority.defaultPriority,
        icon: '@mipmap/ic_launcher',
      );

      const NotificationDetails notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: DarwinNotificationDetails(),
      );

      // Schedule for 7 AM every day
      await _notifications.zonedSchedule(
        dailyGreetingId,
        'üåÖ Ch√†o bu·ªïi s√°ng!',
        'H√£y ki·ªÉm tra th·ªùi ti·∫øt h√¥m nay ƒë·ªÉ chu·∫©n b·ªã t·ªët nh·∫•t cho ng√†y m·ªõi!',
        _nextInstanceOf7AM(),
        notificationDetails,
        androidScheduleMode:
            AndroidScheduleMode.exactAllowWhileIdle, // ‚úÖ m·ªõi b·∫Øt bu·ªôc
        matchDateTimeComponents:
            DateTimeComponents.time, // ‚úÖ gi·ªØ l·∫°i ƒë·ªÉ l·∫∑p m·ªói ng√†y
        payload: 'daily_greeting',
      );

      print('‚úÖ Daily greeting scheduled for 7 AM');
    } catch (e) {
      print('‚ùå Error scheduling daily greeting: $e');
    }
  }

  /// Calculate next 7 AM
  static tz.TZDateTime _nextInstanceOf7AM() {
    final now = tz.TZDateTime.now(tz.local);
    tz.TZDateTime scheduledDate = tz.TZDateTime(
      tz.local,
      now.year,
      now.month,
      now.day,
      7, // 7 AM
    );

    if (scheduledDate.isBefore(now)) {
      scheduledDate = scheduledDate.add(const Duration(days: 1));
    }

    return scheduledDate;
  }

  /// Show air quality notification
  static Future<void> showAirQualityNotification({
    required int aqi,
    required String level,
    required String description,
    required String advice,
  }) async {
    try {
      if (!_isInitialized) await initialize();

      // Ch·ªâ th√¥ng b√°o khi ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ kh√¥ng t·ªët (AQI >= 3)
      if (aqi < 3) return;

      String title;
      String body;

      switch (aqi) {
        case 3:
          title = '‚ö†Ô∏è Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ trung b√¨nh';
          break;
        case 4:
          title = 'üö® Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ k√©m';
          break;
        case 5:
          title = '‚ò†Ô∏è Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ r·∫•t k√©m';
          break;
        default:
          return;
      }

      body = 'üò∑ $description\nüí° $advice';

      const AndroidNotificationDetails androidDetails =
          AndroidNotificationDetails(
        'air_quality',
        'Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠',
        channelDescription: 'C·∫£nh b√°o v·ªÅ ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠',
        importance: Importance.high,
        priority: Priority.high,
        icon: '@mipmap/ic_launcher',
        color: Colors.orange,
        ledColor: Colors.orange,
        ledOnMs: 1000,
        ledOffMs: 500,
      );

      const NotificationDetails notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: DarwinNotificationDetails(
          presentAlert: true,
          presentBadge: true,
          presentSound: true,
        ),
      );

      await _notifications.show(
        airQualityId,
        title,
        body,
        notificationDetails,
        payload: 'air_quality',
      );

      print('‚úÖ Air quality notification sent: AQI $aqi');
    } catch (e) {
      print('‚ùå Error showing air quality notification: $e');
    }
  }

  /// Show weather alert notification
  static Future<void> showWeatherAlert({
    required double temperature,
    required double feelsLike,
    required int humidity,
    required String weatherMain,
    required String description,
    required int uvIndex,
  }) async {
    try {
      if (!_isInitialized) await initialize();

      String? title;
      String? body;

      // Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt ƒë√°ng ch√∫ √Ω
      if (temperature >= 35 || feelsLike >= 38) {
        title = 'üå°Ô∏è C·∫£nh b√°o n·∫Øng n√≥ng';
        body =
            'Nhi·ªát ƒë·ªô ${temperature.toInt()}¬∞C (c·∫£m gi√°c ${feelsLike.toInt()}¬∞C)\n'
            '‚òÄÔ∏è Thoa kem ch·ªëng n·∫Øng\n'
            'üíß U·ªëng nhi·ªÅu n∆∞·ªõc\n'
            'üëï M·∫∑c qu·∫ßn √°o tho√°ng m√°t';
      } else if (weatherMain.toLowerCase().contains('rain') ||
          description.contains('m∆∞a')) {
        title = 'üåßÔ∏è C·∫£nh b√°o m∆∞a';
        body = '$description\n'
            '‚òÇÔ∏è Mang theo √¥\n'
            'üß• M·∫∑c √°o kho√°c\n'
            'üëü ƒêi gi√†y ch·ªëng tr∆∞·ª£t';
      } else if (weatherMain.toLowerCase().contains('thunderstorm') ||
          description.contains('gi√¥ng')) {
        title = '‚õàÔ∏è C·∫£nh b√°o gi√¥ng b√£o';
        body = '$description\n'
            'üè† H·∫°n ch·∫ø ra ngo√†i\n'
            '‚ö° Tr√°nh xa c√¢y cao\n'
            'üì± Theo d√µi th·ªùi ti·∫øt';
      } else if (humidity >= 85) {
        title = 'üíß ƒê·ªô ·∫©m cao';
        body = 'ƒê·ªô ·∫©m ${humidity}% - Th·ªùi ti·∫øt oi b·ª©c\n'
            'üëï M·∫∑c qu·∫ßn √°o cotton\n'
            'üí® T√¨m n∆°i tho√°ng m√°t\n'
            'üíß B·ªï sung n∆∞·ªõc th∆∞·ªùng xuy√™n';
      } else if (uvIndex >= 8) {
        title = '‚òÄÔ∏è Tia UV cao';
        body = 'Ch·ªâ s·ªë UV: $uvIndex - R·∫•t cao\n'
            'üï∂Ô∏è ƒêeo k√≠nh r√¢m\n'
            'üß¥ Thoa kem ch·ªëng n·∫Øng SPF 30+\n'
            'üëí ƒê·ªôi m≈© r·ªông v√†nh';
      }

      // Ch·ªâ g·ª≠i notification n·∫øu c√≥ c·∫£nh b√°o
      if (title == null || body == null) return;

      const AndroidNotificationDetails androidDetails =
          AndroidNotificationDetails(
        'weather_alert',
        'C·∫£nh b√°o th·ªùi ti·∫øt',
        channelDescription: 'C·∫£nh b√°o v√† l·ªùi khuy√™n v·ªÅ th·ªùi ti·∫øt',
        importance: Importance.high,
        priority: Priority.high,
        icon: '@mipmap/ic_launcher',
        color: Colors.blue,
        ledColor: Colors.blue,
        ledOnMs: 1000,
        ledOffMs: 500,
      );

      const NotificationDetails notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: DarwinNotificationDetails(
          presentAlert: true,
          presentBadge: true,
          presentSound: true,
        ),
      );

      await _notifications.show(
        weatherAlertId,
        title,
        body,
        notificationDetails,
        payload: 'weather_alert',
      );

      print('‚úÖ Weather alert sent: $title');
    } catch (e) {
      print('‚ùå Error showing weather alert: $e');
    }
  }

  /// Cancel specific notification
  static Future<void> cancelNotification(int id) async {
    try {
      await _notifications.cancel(id);
      print('‚úÖ Cancelled notification ID: $id');
    } catch (e) {
      print('‚ùå Error cancelling notification: $e');
    }
  }

  /// Cancel all notifications
  static Future<void> cancelAllNotifications() async {
    try {
      await _notifications.cancelAll();
      print('‚úÖ Cancelled all notifications');
    } catch (e) {
      print('‚ùå Error cancelling all notifications: $e');
    }
  }

  /// Get pending notifications
  static Future<List<PendingNotificationRequest>>
      getPendingNotifications() async {
    try {
      return await _notifications.pendingNotificationRequests();
    } catch (e) {
      print('‚ùå Error getting pending notifications: $e');
      return [];
    }
  }

  /// Check if notifications are enabled
  static Future<bool> areNotificationsEnabled() async {
    try {
      final androidImplementation =
          _notifications.resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>();

      if (androidImplementation != null) {
        final bool? isEnabled =
            await androidImplementation.areNotificationsEnabled();
        return isEnabled ?? false;
      }

      return true; // Default for iOS or if check fails
    } catch (e) {
      print('‚ùå Error checking notification status: $e');
      return false;
    }
  }

  /// Open notification settings
  static Future<void> openNotificationSettings() async {
    try {
      final androidImplementation =
          _notifications.resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>();

      if (androidImplementation != null) {
        await androidImplementation.requestNotificationsPermission();
      }
    } catch (e) {
      print('‚ùå Error opening notification settings: $e');
    }
  }
}
